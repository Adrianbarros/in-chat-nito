{"version":3,"sources":["components/HomePage.js","components/ClassList.js","components/Logout.js","components/MessageForm.jsx","components/MessageList.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","react_default","a","createElement","className","onSubmit","getUsername","id","type","name","placeholder","createUsername","ClassList1","Button_default","onClick","switchToChat","variant","size","Logout","logOut","MessageForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","e","preventDefault","message","from","onMessageSubmit","setState","target","value","_this2","handleSubmit","onChange","handleChange","Component","Message","styles","MessageRight","last","Cloud","CloudRight","MessageList","node","ReactDOM","findDOMNode","shouldScrollBottom","scrollTop","offsetHeight","scrollHeight","messages","map","i","MessageList_Message","key","React","socket","io","App","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","existing_username","wrap","_context","prev","next","elements","console","log","fetch","concat","method","header","then","res","status","document","getElementById","innerHTML","json","courses","test","stop","_x","apply","arguments","_ref2","_callee2","u","new_username","_context2","_x2","undefined","activeChat","w","defineProperty","users","on","messageReceive","_ref3","chatUpdate","toConsumableArray","emit","components_HomePage","_this3","components_Logout","components_MessageList","length","components_MessageForm","handleMessageSubmit","components_ClassList","jinfo","renderHomePage","renderCoursePage","renderChat","Boolean","window","location","hostname","match","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbc91973.chunk.js","sourcesContent":["import React from \"react\";\n\nconst HomePage = props => (\n<div className=\"login\">\n\n\t<form onSubmit={props.getUsername}>\n\t\t<h4>Login</h4>\n\n\t\t<input id='login_input' type=\"text\" name=\"name\" className=\"login-button\" placeholder=\"Username...\"/>\n\t\t<button type=\"submit\" id=\"getData\" className='btn'>Submit</button>\n\t\t<p id=\"login_error\"></p>\n\t</form>\n\t\n\n\t<form className= \"SignUponSubmit\" onSubmit = {props.createUsername}>\n\t\t<h4>Sign Up</h4>\n\n\t\t<input id='login_input' type=\"text\" name=\"new_username\" className=\"login-button\" placeholder=\"Enter New Username\"/>\n\t\t<button id=\"getData\" className='SignUpbtn'>Submit</button>\n\t\t<p id=\"signup_error\"></p>\t\n\t</form> \n</div>\n\t);\n\nexport default HomePage\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\n\n\nconst ClassList1 = props => (\n\t<div>\n\t\t\t<h2>Here are the courses you are enrolled in: </h2>\n\n\t<div className = \"courses_sec\">\n\t<center><Button className = \"courses_btn\" onClick={() => { props.switchToChat() }}>\nWeb Development\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nComputer Architecture\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nSpanish\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nGame Design\t</Button> </center>\n\t&nbsp;&nbsp;&nbsp;\n\t\n\t<center><Button className = \"courses_btn\" variant=\"primary\" size=\"lg\" >\nMusic History\t</Button> </center>\n\t</div>\n  </div>\n);\n\n\n// displays users from \"/users\"\n// function ClassList(props) { \n// \treturn (\n// \t\t <div>{props.jinfo.map(user=>{\n// \t\t\t return <h2 key={user.id}>{user.username}</h2>\n// \t\t })}\n// \t\t\t {/* <h1>hello</h1> */}\n// \t\t </div>\n// \t);\n//   }\n\n// used for inline styling below -- specifically for jsx\nlet styles = {\n    margin: '10px',\n  };\n\n//displays courses from \"/courses\"\nfunction ClassList(props) { \n\treturn (\n\t\t <div>\n\t\t\t<h2>Here are the courses you are enrolled in: </h2>\n\t\t\t<div className = \"courses_sec\">\n\t\t\t\t{props.courses.map(course=>{\n\t\t\t\t\treturn <Button className=\"courses_btn\" style={styles} key={course.id} >{course.name}</Button>\n\t\t\t\t})}\n\t\t\t</div>\n\t\t </div>\n\t);\n  }\n\n\nexport default ClassList1;\n","import React from \"react\";\n\nconst Logout = props => (\n\t<form onSubmit = {props.logOut}>\t\t\n\t\t<button id=\"log-btn\">Logout</button>\n\t</form>\n\t\n\n);\n\nexport default Logout","import React, { Component } from 'react';\n\nimport styles from '../App.css';\n\nclass MessageForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: ''\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const message = {\n            from: this.props.name,\n            text: this.state.text\n        };\n        this.props.onMessageSubmit(message);\n        this.setState({\n            text: ''\n        });\n    }\n\n    handleChange(e) {\n        this.setState({\n            text: e.target.value\n        });\n    }\n\n    render() {\n        return (\n            <form \n                onSubmit = { e => this.handleSubmit(e)}\n            >\n                <input \n                    \n                    onChange = { e => this.handleChange(e)}\n                    value = { this.state.text}\n                    placeholder = 'Message'\n                />\n            </form>\n        );\n    }    \n}\n\nexport default MessageForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styles from '../App.css';\n\nconst Message = props => (\n    <div className={styles.Message + (props.from === props.name ? ' ' + styles.MessageRight : '')}>\n        {/* group messages from which user they are */}\n        <strong>{(props.last === props.from) ? '' :(props.from === props.name ? 'You' : props.from)}</strong>\n        <span className = {styles.Cloud + (props.from === props.name ? ' ' + styles.CloudRight : '')}>{props.text}</span>\n    </div>\n);\n\nclass MessageList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    //scrolls messages list always to the bottom of it\n    //based on http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html\n    // componentDidUpdate() {\n    //     const node = ReactDOM.findDOMNode(this);\n    //     node.scrollTop = node.scrollHeight;\n    // }\n\n    //scroll only if user was already at the bottom of messages list\n    componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this);\n        this.shouldScrollBottom = node.scrollTop + node.offsetHeight === node.scrollHeight;\n    }\n\n    componentDidUpdate() {\n        if(this.shouldScrollBottom) {\n            const node = ReactDOM.findDOMNode(this);\n            node.scrollTop = node.scrollHeight;\n        }\n    }\n\n    render() {\n        return (\n            <div className={styles.MessageList}>\n                {\n                    this.props.messages.map( (messages, i) => {\n                        return (\n                            <Message \n                                key = {i}\n                                from = {messages.from}        \n                                text = {messages.text}\n                                name = {this.props.name}\n                                last = {(i > 0) ? this.props.messages[i-1].from : ''}\n                            />    \n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default MessageList;","import React from 'react';\nimport './App.css';\nimport './SignUp.css'\nimport HomePage from \"./components/HomePage\"\nimport ClassList from \"./components/ClassList\"\nimport Logout from \"./components/Logout\"\nimport MessageForm from \"./components/MessageForm.jsx\";\nimport MessageList from \"./components/MessageList.jsx\";\n// import React, { Component } from 'react';\n\nimport io from \"socket.io-client\"; \nconst socket = io('/')\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); \n    this.state = {\n      name: undefined,\n      activeChat: false,\n      users: [],\n      courses: [],\n      messages: [], \n      text: '', \n      name: ''\n    }; \n  }\n\n  componentDidMount(){\n    socket.on('message', message => this.messageReceive(message));\n    socket.on('update', ({users}) => this.chatUpdate(users));\n  }\n\n  messageReceive(message) {\n    const messages = [...this.state.messages, message];\n    this.setState({messages})\n  }\n\n  chatUpdate(users) {\n    this.setState({users});\n  }\n\n  handleUserSubmit(name) {\n    if(name) {\n        this.setState({name});\n        socket.emit('join', name);\n    }\n}\n\n  handleMessageSubmit(message) {\n    if (message.text) {\n        const messages = [...this.state.messages, message];\n        this.setState({messages});\n        socket.emit('message', message);\n    }\n  }\n\n  // FUNCTION FOR LOGIN BUTTON -- NEEDS MODIFICATION\n  getUsername = async(event) => {\n    //this prevents the page from reloading when the button is clicked\n    event.preventDefault();\n\n    // gets userinput from login field and prints name in console\n    const existing_username = event.target.elements.name.value;\n    console.log(existing_username);\n\n    fetch(`/login/${existing_username}`, {\n      method:'GET',\n      header: existing_username\n    })\n    .then(res => {\n      console.log(res.status)\n      // if user does not exists, print error message on screen\n      if(res.status === 404){\n        //this.setState({ name : existing_username })\n          let error = \"Error: no user found\";\n          // gets element with id 'login_error\" and prints the error on the screen\n          document.getElementById('login_error').innerHTML = error;\n        }; \n      \n      // if user exists, store username in state + fetch courses -> redirects to courses page\n      if(res.status === 200){\n        // setting the state causes the page to be rerendered \n        this.setState({ name : existing_username })\n\n        // fetch list of courses from backend route\n        fetch('/courses')\n        .then(res => res.json())\n        .then(courses => this.setState({ courses }))\n        .then(test => console.log(this.state.courses))\n      }\n    }) \n  }\n\n\n// FUNCTION FOR SIGNUP BUTTON\ncreateUsername = async(u) => {\n  //this prevents the page from reloading when the button is clicked\n  u.preventDefault();\n\n  // gets userinput from signup field and prints name in console\n  const new_username = u.target.elements.new_username.value;\n  console.log(new_username);\n\n  // checks if the new username already exists\n  fetch(`/signup/${new_username}`, {\n    method:'GET',\n    header: new_username\n  })\n  .then(res=>{\n    console.log(res.status)\n\n    if(res.status === 404){\n      let message = \"Error: Username already exists.\";\n      // if user exists -> print error message\n        // gets element with id 'signup_error\" and prints the error message on the screen\n        document.getElementById('signup_error').innerHTML = message;\n      \n    }\n\n    if(res.status === 200){\n      let message = \"User has been created\";\n         // creates username, store new_username in state + fetch courses -> redirects to courses page\n        this.setState({ name : new_username })\n\n        // fetch list of courses from backend route\n        fetch('/courses')\n        .then(res => res.json())\n        .then(courses => this.setState({ courses }))\n        .then(test => console.log(this.state.courses))\n      }\n    })\n\n  }\n\n\n\n//THIS IS FOR USERS -- via users route in backend\n// NOTE : componentDidMount() is invoked immediately after a component is mounted\n/*  componentDidMount() {\n    fetch('/users')\n      .then(res => res.json())\n      .then(users => this.setState({ users }));\n  } */\n \nlogOut = (e) => {\n  e.preventDefault();\n  this.setState({\n    name: undefined,\n    courses: [],\n    activeChat : false,\n  })\n}\n\nswitchToChat = (w) => {\n  //w.preventDefault();\n  this.setState({\n    activeChat : true,\n  })\n}\n\n\n// let result = condition ? value1 : value2;\n// render() {\n//   return this.state.name === undefined ? this.renderHomePage() : this.renderChat();\n// }\n\nrenderHomePage(){\n  return(\n    <div>\n  <HomePage getUsername={this.getUsername} createUsername={this.createUsername}/>\n  \n      </div>\n  )\n}\n\nrenderChat() {\n  return (\n    <div>\n      <h1>Chat Page</h1>\n    <Logout logOut={this.logOut}/>\n    <div className>\n      <MessageList\n          messages={this.state.messages}\n          name = {this.state.name}\n          last = {this.state.messages[this.state.messages.length-2]}\n      />\n      <MessageForm\n          onMessageSubmit={message => this.handleMessageSubmit(message)}\n          name={this.state.name}\n      />\n    </div>      \n    </div>\n  );\n}\n\nrenderCoursePage() {\n  return (\n    <div>\n    <Logout logOut={this.logOut}/>\n    <ClassList switchToChat={this.switchToChat} jinfo={this.state.users} courses={this.state.courses}/>\n    </div>\n  );\n}\n\nrender(){\n  if(this.state.name === undefined && this.state.activeChat === false)\n    return this.renderHomePage()\n  else if(this.state.name !== undefined && this.state.activeChat === false)\n    return this.renderCoursePage()\n  else\n    return this.renderChat()\n}\n\n\n\n\n\n\n  //  render() {\n  //   if(this.state.name === undefined)\n  //     return (\n  //        <div className=\"wrapper\">\n  //       <HomePage getUsername={this.getUsername} createUsername={this.createUsername}/>\n  //       {/* <Chat/> */}\n  //       </div>\n\n\n  //       );\n  //   else\n  //     return (\n  //     <div>\n  //         <Logout logOut={this.logOut}/>\n  //         <ClassList jinfo={this.state.users} courses={this.state.courses}/>\n  //     </div>\n  //     );\n  // }\n} \n//    render() {    \n//      return this.state.name !== '' ? this.renderLayout() : this.renderUserForm();\n//   }\n\n\n// renderLayout(){\n//   return(\n//     <div className={styles.MessageWrapper}>\n//       <MessageList\n//           messages={this.state.messages}\n//           name = {this.state.name}\n//           last = {this.state.messages[this.state.messages.length-2]}\n//       />\n//       <MessageForm\n//           onMessageSubmit={message => this.handleMessageSubmit(message)}\n//           name={this.state.name}\n//       />\n//     </div>      \n\n//   ); \n// }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'; \nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport ClassList from './components/ClassList';\nimport HomePage from './components/HomePage';\nimport CourseCreate from './components/CourseCreate';\nimport JoinCourse from './components/JoinCourse';\n//import Chat from '../../public/Chat';\n\n\n// ReactDOM.render(\n//     <Router>\n//        <div>\n//        <nav>\n//           <ul id=\"navbar\">\n//               <Link className=\"nav_item\" id=\"text\" to=\"/\">Home</Link>\n//               <Link  className=\"nav_item\" to=\"/courses\">Courses</Link>\n//               {/* <Link  className=\"nav_item\" to=\"/join\">JoinCourse</Link>\n//               <Link  className=\"nav_item\" to=\"/create\">CreateCourse</Link> */}\n//               <Link  className=\"nav_item\" to=\"/chat\">Chat</Link>\n//           </ul>\n//         </nav>\n\n//            <Route exact path=\"/\" component={App}/>\n//            <Route path=\"/courses\" component={ClassList}/>\n//            {/* <Route path=\"/join\" component={JoinCourse}/> */}\n//            {/* <Route path=\"/create\" component={CourseCreate}/> */}\n//            {/* <Route path=\"/chat\"  component={Chat}/>  */}\n//        </div>\n//     </Router>,\n//     document.getElementById('root')\n//   )\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}